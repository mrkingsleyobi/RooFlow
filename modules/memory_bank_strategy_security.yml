memory_bank_strategy:
  initialization: |
      <thinking>
      - **CHECK FOR MEMORY BANK:**
      </thinking>
          <thinking>
        * First, check if the memory-bank/ directory exists.
          </thinking>
          <list_files>
          <path>.</path>
          <recursive>false</recursive>
          </list_files>
          <thinking>
        * If memory-bank DOES exist, skip immediately to `if_memory_bank_exists`.
          </thinking>
  if_no_memory_bank: |
      1. **Inform the User:**  
          "No Memory Bank was found. I recommend creating one to  maintain project context.
      2. **Offer Initialization:** 
          Ask the user if they would like to initialize the Memory Bank.
      3. **Conditional Actions:**
         * If the user declines:
          <thinking>
          I need to proceed with the task without Memory Bank functionality.
          </thinking>
          a. Inform the user that the Memory Bank will not be created.
          b. Set the status to '[MEMORY BANK: INACTIVE]'.
          c. Proceed with the task using the current context if needed or if no task is provided, use the `ask_followup_question` tool.
          * If the user agrees:
            <thinking>
            I need to create the `memory-bank/` directory and core files. I should use write_to_file for this, and I should do it one file at a time, waiting for confirmation after each.  The initial content for each file is defined below. I need to make sure any initial entries include a timestamp in the format YYYY-MM-DD HH:MM:SS.
            </thinking>
      4. **Check for `projectBrief.md`:**
          - Use list_files to check for `projectBrief.md` *before* offering to create the memory bank.
          - If `projectBrief.md` exists:
           * Read its contents *before* offering to create the memory bank.
          - If no `projectBrief.md`:
           * Skip this step (we'll handle prompting for project info *after* the user agrees to initialize, if they do).
            <thinking>
            I need to add default content for the Memory Bank files.
            </thinking>
              a. Create the `memory-bank/` directory.
              b. Create `memory-bank/threatModel.md` with `initial_content`.
              c. Create `memory-bank/securityFindings.md` with `initial_content`.
              d. Create `memory-bank/securityGuidelines.md` with `initial_content`.
              e. Set status to '[MEMORY BANK: ACTIVE]' and inform the user that the Memory Bank has been initialized and is now active.
              f. Proceed with the task using the context from the Memory Bank or if no task is provided, use the `ask_followup_question` tool.
  initial_content:
    threatModel.md: |
      # Threat Model
      
      This file captures identified threats and vulnerabilities.
      YYYY-MM-DD HH:MM:SS - Log of updates made will be appended as footnotes to the end of this file.
      
      *
      
      ## Threats
      
      *   
      
      ## Vulnerabilities
      
      *   
    securityFindings.md: |
      # Security Findings
      
      This file contains summaries and prioritization of vulnerability scanning findings.
      YYYY-MM-DD HH:MM:SS - Log of updates made.
      
      *
      
      ## Findings
      
      *   
      
      ## Prioritization
      
      *
    securityGuidelines.md: |
      # Security Guidelines
      
      This file documents security best practices and compliance guidance.
      YYYY-MM-DD HH:MM:SS - Log of updates made.
      
      *
      
      ## Best Practices
      
      *   
      
      ## Compliance Guidance
      
      *
  if_memory_bank_exists: |
        **READ *ALL* MEMORY BANK FILES**
        <thinking>
        I will read all memory bank files, one at a time.
        </thinking>
        Plan: Read all mandatory files sequentially.
        1. Read `threatModel.md`
        2. Read `securityFindings.md` 
        3. Read `securityGuidelines.md` 
        4. Set status to [MEMORY BANK: ACTIVE] and inform user.
        5. Proceed with the task using the context from the Memory Bank or if no task is provided, use the `ask_followup_question` tool.
      
general:
  status_prefix: "Begin EVERY response with either '[MEMORY BANK: ACTIVE]' or '[MEMORY BANK: INACTIVE]', according to the current state of the Memory Bank."

memory_bank_updates:
  frequency: "UPDATE MEMORY BANK THROUGHOUT THE CHAT SESSION, WHEN SIGNIFICANT CHANGES OCCUR IN THE PROJECT."
  threatModel.md:
    trigger: "When new threats or vulnerabilities are identified or existing ones are modified. Use your judgment to determine significance."
    action: |
      <thinking>
      I need to update threatModel.md with new or modified threat models.
      Use insert_content to *append* new information or use apply_diff to modify existing entries if necessary. Timestamp and summary of change will be appended as footnotes to the end of the file.
      </thinking>
    format: "(Optional)[YYYY-MM-DD HH:MM:SS] - [Summary of Change]"
  securityFindings.md:
    trigger: "When new security findings are identified or existing ones are modified. Use your judgment to determine significance."
    action: |
      <thinking>
      I need to update securityFindings.md with new or modified security findings.
      Use insert_content to *append* new information or use apply_diff to modify existing entries if necessary. Timestamp and summary of change will be appended as footnotes to the end of the file.
      </thinking>
    format: "(Optional)[YYYY-MM-DD HH:MM:SS] - [Summary of Change]"
  securityGuidelines.md:
    trigger: "When new security guidelines are created or existing ones are modified. Use your judgment to determine significance."
    action: |
      <thinking>
      I need to update securityGuidelines.md with new or modified security guidelines.
      Use insert_content to *append* new information or use apply_diff to modify existing entries if necessary. Timestamp and summary of change will be appended as footnotes to the end of the file.
      </thinking>
    format: "(Optional)[YYYY-MM-DD HH:MM:SS] - [Summary of Change]"

umb:
  trigger: "^(Update Memory Bank|UMB)$"
  instructions: 
    - "Halt Current Task: Stop current activity"
    - "Acknowledge Command: '[MEMORY BANK: UPDATING]'" 
    - "Review Chat History"
  user_acknowledgement_text: "[MEMORY BANK: UPDATING]" 
  core_update_process: |
      1. Current Session Review:
          - Analyze complete chat history
          - Extract cross-mode information
          - Track mode transitions
          - Map activity relationships
      2. Comprehensive Updates:
          - Update from all mode perspectives
          - Preserve context across modes
          - Maintain activity threads
          - Document mode interactions
      3. Memory Bank Synchronization:
          - Update all affected *.md files
          - Ensure cross-mode consistency
          - Preserve activity context
          - Document continuation points
  task_focus: "During a UMB update, focus on capturing any clarifications, questions answered, or context provided *during the chat session*. This information should be added to the appropriate Memory Bank files (likely `activeContext.md` or `decisionLog.md`), using the other modes' update formats as a guide.  *Do not* attempt to summarize the entire project or perform actions outside the scope of the current chat."
  cross-mode_updates: "During a UMB update, ensure that all relevant information from the chat session is captured and added to the Memory Bank. This includes any clarifications, questions answered, or context provided during the chat. Use the other modes' update formats as a guide for adding this information to the appropriate Memory Bank files."
  post_umb_actions:
    - "Memory Bank fully synchronized"
    - "All mode contexts preserved"
    - "Session can be safely closed"
    - "Next assistant will have complete context"
  override_file_restrictions: true
  override_mode_restrictions: true